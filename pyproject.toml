
# This file establishes the info needed to install simmate via pip, how to
# upload it to PyPI, and how to run python packages like pytest and coverage.

# For more information on this file and how to make similar ones, see:
#    https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
#    https://github.com/pypa/sampleproject

# For the details on conda-forge installation see:
#    https://github.com/conda-forge/simmate-feedstock

# Note, for utilities like pytest and coverage, we prefer to use this file
# over files like "pytest.ini" because pyproject.toml has more uses that
# we may need in the future (i.e. it can use other modules).

# -----------------------------------------------------------------------------

[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# -----------------------------------------------------------------------------

[project]

# published name for pip install to use
name="simmate"

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
# https://semver.org/
version="0.14.0"

# Maintainer info
authors = [{name = "Jack D. Sundberg", email = "jacksund@live.unc.edu"}]

# a quick summary and then README
# NOTE: instead of our main README, I tell users to move directly to github
description="Simmate is a toolbox for computational materials research."
readme = ".github/README_for_PyPI.md"

# General name for our LICENSE file
license = {text = "BSD 3-Clause License"}

# Classifiers help users find your project by categorizing it.
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers=[
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

# Specify which Python versions are supported.
requires-python=">=3.10"

# This field lists other packages that your project depends on to run.
dependencies=[
    # Core dependencies
    "numpy >=1.22.0, <1.24.2",
    "pandas >=1.3.5, <1.5.4",
    "django >=4.0.0, <4.1.6",
    "dask >=2021.12.0, <2023.6.0",
    "distributed >=2022.7.1, <2023.2.0",  # part of dask
    "typer >=0.6.0, <0.7.1",
    #
    # Extra (smaller) dependencies & utilities
    "django-allauth >=0.50.0, <=0.54.0",  # for website accounts and google/github sign-ins
    "django-crispy-forms >=1.13.0, <=1.14.0",  # for formatting of online forms
    "django-pandas >=0.6.6, <=0.6.6",  # for converting QuerySets to PandasDataFrames
    "django-unicorn >=0.50.0, <=0.50.0",  # for responsive web UI (AJAX calls)
    "dj-database-url >=0.5.0, <1.4.0",  # for DigitalOcean URL conversion
    "djangorestframework >=3.13.1, <3.14.1",  # for our REST API
    "django-filter >=21.1, <=22.1",  # sets up automatic filters for our REST API
    "pyyaml >=6.0, <=6.0",  # for yaml configuration files
    "plotly >=5.4.0, <5.15.0",  # for interactive plots and visualization
    "markdown >=3.4.1, <=3.4.3",  # for docs and markdown rendering in html templates
    "requests >=2.28.1, <2.28.3",  # for quick web queries and downloads
    "scikit-learn >=1.1.1, <1.2.2",  # machine-learning methods (may become core dep)
    "cloudpickle >=2.1.0, <=2.2.0",  # for serializing complex python objects
    "rich >=11.0, <13.3.4",  # for coloring and styling the CLI outputs
    "toml >=0.10.2, <=0.10.2",  # for toml configuration files
    #
    # These are from the MP stack and I want to phase them out over time
    "pymatgen >=2022.1.9, <2023.5.32",
    "pymatgen-analysis-diffusion >=2021.4.29, <=2022.7.21",  # pymatgen-diffusion on conda
    "matminer >=0.7.6, <0.8.1",
    "ase >=3.22.1, <=3.22.1",
]

# optional dependencies that are not installed by default
[project.optional-dependencies]

# For development and testing
DEV = [
    "pytest >=6.2.5, <7.3.2",
    "pytest-django >=4.5.2, <=4.5.2",
    "pytest-mock >=3.7.0, <3.10.1",
    "pytest-xdist >=2.5.0, <3.4.0",
    "black >=22.1.0, <23.2.0",
    "coverage >=6.2, <7.0.6",
    "isort >=5.10.1, <5.12.1",
    "mkdocs-material >=8.4.1, <9.0.10",
    "mkdocstrings >=0.19.0, <=0.21.2",
    "mkdocstrings-python >=0.7.1, <0.8.4",
]

EXE = [
    "prefect >=2.0.0, <2.6.6",  # for extra workflow orchestration 
    "dask-jobqueue >=0.7.3, <=0.7.4",  # for submitting on HPC clusters
    "anyio >=3.6.1",  # for async utilities when using Prefect
    "nest_asyncio >=1.5.5, <1.5.7",  # to allow async calls in Spyder/iPython/Jupyter
]

# These are packages that I commonly use alongside simmate. I plan to
# organize these into optional dependencies and/or documentation. But until
# then, I keep them here for my own reference.
EXTRAS = [
    "numba >=0.53.0",  # for speed-up of basic calcs
    "psycopg2-binary >=2.9.2",  # for Postgres connections (added -binary to fix bug)
    'selenium',  # for web scraping (slow but robust)
    'spyder',  # IDE for writing/editting
    'gunicorn',  # for website server (Django+DigitalOcean) # NOT WINDOWS
    "graphviz ==1.7",  # python-graphviz on conda. for viewing prefect flows
    "pygraphviz ==1.10",  # pygraphviz on conda. for viewing django tables
    "scikit-learn >=1.0.1",  # for machine-learning
    "fabric >=2.6.0",  # for remote ssh connections
    "django-extensions >=3.1.5",  # simple tools to help with django development
    "bokeh >=2.1.1",  # for the dask dashboard
]

# For downloading third-party data directly from source instead of Simmate
DATA = [
    "mp-api >=0.26.3, <0.30.9",  # materials project
]

# Specific dependencies needed for optional simmate apps
CLEASE = [
    "clease >=1.0.3, <=1.0.6",  # for cluster expansion calcs
]

# Link to our homepage. Use github for now.
[project.urls]
homepage = "https://simmate.org/"
repository = "https://github.com/jacksund/simmate"
documentation = "https://jacksund.github.io/simmate/home/"

# Register command line interface
[project.scripts]
simmate = "simmate.command_line.base_command:simmate_app"
simmate-vasp = "simmate.apps.vasp.command_line.base_command:vasp_app"

# -----------------------------------------------------------------------------

# Indicate which directory the source coude is in
[tool.setuptools.packages.find]
where = ["src"]

# All files that aren't *.py need to be defined explicitly. Don't "automate"
# this to grab all files because this could break installation. This can
# be effectively the opposite of .gitignore.
[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
simmate = [
    "**/*.md",
    "**/*.rst",
    "**/*.json",
    "**/*.csv",
    "**/*.yaml",
    "**/*.html",
    "**/*.svg",
    "**/*.toml",
]
# Note, the default is to include everything, but I don't want to ship test
# files. I could switch this to use exclude-package-data in the future.
# https://setuptools.pypa.io/en/latest/userguide/datafiles.html#exclude-package-data

# -----------------------------------------------------------------------------

# These settings initialize pytest and django-pytest.
[tool.pytest.ini_options]

# Tell django-pytest settings for a dummy database and also website interaction.
# To disable django-pytest, add "-p no:django" to your pytest command
DJANGO_SETTINGS_MODULE = "simmate.configuration.django.settings_test"

# We classify all tests so that we can run different subgroups of tests. You can
# run the tests marked with "slow"... "pytest -m slow"
markers = [
    "blender: requires blender installed",
    "vasp: requires vasp installed",
    "pymatgen: runs a pymatgen-compatibility test",
    "prefect_db: requires access to the prefect database",
    "slow: test is slow (>30s) and unstable in in the CI",
]

# By default, we only want to run unmarked tests. The simplest way to do this
# without adding extra files is to just list "not <marker1> and not <marker2" 
# for all of them. We also want migrations to be built from scratch, not past 
# migration folders.
# I manually remove -m when testing coverage, but am unsure if there's a better
# way to do this.
addopts = "--no-migrations --durations=15 -m 'not blender and not vasp'"

# There are a number of warnings that are expected when running our tests.
# We remove these from our output for clarity.
filterwarnings = [
    "ignore:cannot collect test class*:Warning",
    "ignore:Issues encountered while parsing CIF*:Warning",
    "ignore:No POTCAR file with matching TITEL fields*:Warning",
    "ignore:The input structure does not match the expected standard primitive!*:Warning",
    "ignore:Maximum iteration number is reached*:Warning",
    # "ignore:*is an unconverged VASP run*:Warning", BUG: why won't this regex work?
]

# -----------------------------------------------------------------------------

# These settings initialize the python coverage module. With this file, you can
# just use "coverage run" in the  base directory without configuring any
# other settings in the command.
[tool.coverage.run]

# all tests are written using pytest, so we always need this module set
command_line = "-m pytest"

# when testing coverage, we want to ignore the test files themselves.
omit = ["*/test_*", "*/conftest.py", "*/*_test.py"]

# consider adding for coverage of templates
# plugins = django_coverage_plugin  

# -----------------------------------------------------------------------------

# isort is a tool for organizing imports at the top of python files. By default,
# it conflicts with the black formatter we use, so we need to configure it here.

[tool.isort]
profile = "black"

# -----------------------------------------------------------------------------
