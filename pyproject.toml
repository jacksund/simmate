
# This file establishes the info needed to install simmate via pip, how to
# upload it to PyPI, and how to run python packages like pytest and coverage.

# For more information on this file and how to make similar ones, see:
#    https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
#    https://github.com/pypa/sampleproject

# For the details on conda-forge installation see:
#    https://github.com/conda-forge/simmate-feedstock

# Note, for utilities like pytest and coverage, we prefer to use this file
# over files like "pytest.ini" because pyproject.toml has more uses that
# we may need in the future (i.e. it can use other modules).

# -----------------------------------------------------------------------------

[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# -----------------------------------------------------------------------------

[project]
name="simmate"
version="0.18.0"
authors = [{name = "Jack D. Sundberg", email = "jacksundberg123@gmail.com"}]
description="Simmate is a full-stack framework for chemistry research."
readme = ".github/README_for_PyPI.md"
license = {text = "BSD 3-Clause License"}
classifiers=[
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
requires-python=">=3.10"
dependencies=[
    # NOTE!!!
    # We manage our dependencies over in `/env/conda`.
    #
    # We have decided to move away from pip-based installations because some of
    # our dependencies (such as rdkit) have problematic installations via pypi.
    # While we wish we could use pip+uv, it causes too many issues for users,
    # so we will only support conda-based installs for now.
]
# likewise, our optional-dependencies also live there. For example, BADELF
# optional deps live in `/env/conda/badelf.yaml`
# [project.optional-dependencies]
# BADELF = [...]

[project.urls]
homepage = "https://simmate.org/"
repository = "https://github.com/jacksund/simmate"
documentation = "https://jacksund.github.io/simmate/home/"

# command line interface
[project.scripts]
simmate = "simmate.command_line.base_command:simmate_app"
simmate-vasp = "simmate.apps.vasp.command_line.base_command:vasp_app"
simmate-qe = "simmate.apps.quantum_espresso.command_line.base_command:qe_app"

[tool.setuptools.packages.find]
where = ["src"]

# All files that aren't *.py need to be defined explicitly.
[tool.setuptools]
include-package-data = true
[tool.setuptools.package-data]
simmate = [
    "**/*.md",
    "**/*.rst",
    "**/*.json",
    "**/*.csv",
    "**/*.yaml",
    "**/*.html",
    "**/*.svg",
    "**/*.toml",
    "**/*.css",
    "**/*.js",
]
# Note, the default is to include everything, but I don't want to ship test
# files. I could switch this to use exclude-package-data in the future.
# https://setuptools.pypa.io/en/latest/userguide/datafiles.html#exclude-package-data

# -----------------------------------------------------------------------------

# These settings initialize pytest and django-pytest.
[tool.pytest.ini_options]

# Tell django-pytest settings for a dummy database and also website interaction.
# To disable django-pytest, add "-p no:django" to your pytest command
DJANGO_SETTINGS_MODULE = "simmate.configuration.django.settings_test"

# We classify all tests so that we can run different subgroups of tests. You can
# run the tests marked with "slow"... "pytest -m slow"
markers = [
    "blender: requires blender installed",
    "vasp: requires vasp installed",
    "pymatgen: runs a pymatgen-compatibility test",
    "prefect_db: requires access to the prefect database",
    "slow: test is slow (>30s) and unstable in in the CI",
]

# By default, we only want to run unmarked tests. The simplest way to do this
# without adding extra files is to just list "not <marker1> and not <marker2" 
# for all of them. We also want migrations to be built from scratch, not past 
# migration folders.
# I manually remove -m when testing coverage, but am unsure if there's a better
# way to do this.
addopts = "--no-migrations --durations=15 -m 'not blender and not vasp'"

# There are a number of warnings that are expected when running our tests.
# We remove these from our output for clarity.
filterwarnings = [
    "ignore:cannot collect test class*:Warning",
    "ignore:Issues encountered while parsing CIF*:Warning",
    "ignore:No POTCAR file with matching TITEL fields*:Warning",
    "ignore:The input structure does not match the expected standard primitive!*:Warning",
    "ignore:Maximum iteration number is reached*:Warning",
    # "ignore:*is an unconverged VASP run*:Warning", BUG: why won't this regex work?
]

# -----------------------------------------------------------------------------

# These settings initialize the python coverage module. With this file, you can
# just use "coverage run" in the  base directory without configuring any
# other settings in the command.
[tool.coverage.run]

# all tests are written using pytest, so we always need this module set
command_line = "-m pytest"

# when testing coverage, we want to ignore the test files themselves.
omit = ["*/test_*", "*/conftest.py", "*/*_test.py"]

# consider adding for coverage of templates
# plugins = django_coverage_plugin  

# -----------------------------------------------------------------------------

# isort is a tool for organizing imports at the top of python files. By default,
# it conflicts with the black formatter we use, so we need to configure it here.

[tool.isort]
profile = "black"

# -----------------------------------------------------------------------------
