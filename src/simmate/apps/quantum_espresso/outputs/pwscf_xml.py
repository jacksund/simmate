# -*- coding: utf-8 -*-

from pathlib import Path

import xmltodict


class PwscfXml:
    def __init__(self, data: dict, check: bool = False):
        # this class is really just a single dictionary with a bunch of methods
        # attatched to it for reading/picking out certain parts of the dictionary.
        # All methods and properties are parsed "lazily" -- that is they aren't
        # loaded until they are called. Once called, they are cached as well.
        self.data = data

        # TODO: run some prechecks (or just call certain methods) to ensure
        # the dictionary is properly formatted
        if check:
            raise NotImplementedError(
                "checking pwscf.xml data for errors is not yet supported"
            )

    @classmethod
    def from_file(cls, filename: Path | str = "pwscf.xml", **kwargs):
        """
        Loads a `PwscfXml` instance from an `pwscf.xml` output file that was
        generated by Quantum Espresso's `pw.x` program.
        """

        filename = Path(filename)
        with filename.open() as file:
            xml_data = file.read()
        data_dict = xmltodict.parse(xml_data)

        return cls.from_dict(data_dict, **kwargs)

    @classmethod
    def from_dict(cls, data: dict, **kwargs):
        """
        Loads a `PwscfXml` instance from an `pwscf.xml` output file that was
        generated by Quantum Espresso's `pw.x` program.
        """
        # from_dict is synonmous with the default __init__ method
        return cls(data=data)
